version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.0
  aws-ecs: circleci/aws-ecs@6.0.0

executors:
  go-executor:
    docker:
      - image: cimg/go:1.23.3
  machine-executor:
    machine:
      image: ubuntu-2004:2023.10.1
  python-executor:
    docker:
      - image: 'circleci/python:3.7.1'

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build-and-test
      - build-store-lambda
      - production-deploy-infrastructure:
          context: aws
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - release-images:
          context: aws
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy-to-production:
          context: aws
          requires:
            - build-and-test
#            - release-images
#            - production-deploy-infrastructure
#          filters:
#            branches:
#              only: master

jobs:
  build-and-test:
    working_directory: ~/go/src/github.com/statistico/statistico-odds-warehouse
    executor: machine-executor
    environment:
      GOPATH: /home/circleci/go
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Build Release Image
          command: |
            make docker-build
      - run:
          name: Test Release Image
          command: |
            make test
      - run:
          name: Cache Built Images
          command: |
            chmod +x ./.circleci/deploy/docker-save.sh && ./.circleci/deploy/docker-save.sh
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - docker-cache

  build-store-lambda:
    executor: go-executor
    environment:
      GOPATH: /home/circleci/go
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Build / Store Lambda
          command: |
            chmod +x ./.circleci/deploy/build-store.sh && ./.circleci/deploy/build-store.sh
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - artifacts

  production-deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Deploy Cloudformation templates for application infrastructure
          command: |
            aws cloudformation deploy --template-file infrastructure/sqs.yml --stack-name statistico-odds-warehouse-sqs --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/iam.yml --stack-name statistico-odds-warehouse-iam --no-fail-on-empty-changeset --capabilities "CAPABILITY_NAMED_IAM" --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/ecr.yml --stack-name statistico-odds-warehouse-ecr --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/ec2.yml --stack-name statistico-odds-warehouse-ec2 --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/task-definition.yml --stack-name statistico-odds-warehouse-task-definition --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/lambda.yml --stack-name statistico-odds-warehouse-lambda --no-fail-on-empty-changeset
            aws cloudformation deploy --template-file infrastructure/ecs.yml --stack-name statistico-odds-warehouse-ecs --no-fail-on-empty-changeset

  release-images:
    executor: aws-cli/default
    steps:
      - checkout
      - *attach_workspace
      - setup_remote_docker
      - aws-cli/setup
      - run:
          name: Push images to ECR
          command: |
            chmod +x ./.circleci/deploy/docker-load.sh && ./.circleci/deploy/docker-load.sh
            chmod +x ./.circleci/deploy/docker-push.sh && ./.circleci/deploy/docker-push.sh

  deploy-to-production:
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - aws-cli/setup
      - *attach_workspace
#      - aws-ecs/run_task:
#          cluster: "statistico-scheduled-tasks"
#          awsvpc: true
#          launch_type: FARGATE
#          security_group_ids: ${AWS_SECURITY_GROUP_IDS}
#          subnet_ids: ${AWS_PRIVATE_SUBNET_ONE_ID}
#          task_definition: "statistico-odds-warehouse-migrate"
#      - aws-ecs/update_service:
#          family: 'statistico-odds-warehouse-grpc'
#          service_name: 'statistico-odds-warehouse'
#          cluster: 'statistico-grpc-services'
#          container_image_name_updates: >
#            container=statistico-odds-warehouse-grpc,tag=latest
      - run:
          name: Deploy Artifacts to S3
          command: |
            cd /tmp/workspace/artifacts && ls -la
            aws s3 sync --exclude="*" --include="*.zip" /tmp/workspace/artifacts/ s3://statistico-lambda
      - run:
          name: Update Lambda Function
          command: aws lambda update-function-code --function-name statistico-odds-warehouse --s3-bucket statistico-lambda --s3-key statistico-odds-warehouse.zip

